{"behaviors":[{"type":"behavior","desc":"\nBehavior that provides pre-attached callbacks to kernel events.\n\n","events":[],"jsdoc":{"description":"\nBehavior that provides pre-attached callbacks to kernel events.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.JupyterKernelObserver","description":null}],"orig":"*\n         * Behavior that provides pre-attached callbacks to kernel events.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.JupyterKernelObserver\n         "},"demos":[],"symbol":"Urth.JupyterKernelObserver","is":"Urth.JupyterKernelObserver","properties":[{"name":"onKernelReady","type":"Function","desc":"\nHandler for kernel ready events. This event fires when a\nkernel is created and gets to ready state. It also triggers\n`onLoad` of the page if there is already a ready kernel.\n\n","params":[],"jsdoc":{"description":"\nHandler for kernel ready events. This event fires when a\nkernel is created and gets to ready state. It also triggers\n`onLoad` of the page if there is already a ready kernel.\n\n","tags":[{"tag":"method","type":null,"name":"onKerneReady","description":null}],"orig":"*\n             * Handler for kernel ready events. This event fires when a\n             * kernel is created and gets to ready state. It also triggers\n             * `onLoad` of the page if there is already a ready kernel.\n             *\n             * @method onKerneReady\n             "},"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"contentHref":"bower_components/urth-core-behaviors/jupyter-kernel-observer.html"},{"type":"behavior","desc":"\nBehavior that encapsulate some of the functions needed by\nIPyWidgets to properly communicate with their Kernel counterparts.\n\n","events":[],"jsdoc":{"description":"\nBehavior that encapsulate some of the functions needed by\nIPyWidgets to properly communicate with their Kernel counterparts.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.JupyterWidgetBehavior","description":null}],"orig":"*\n         * Behavior that encapsulate some of the functions needed by\n         * IPyWidgets to properly communicate with their Kernel counterparts.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.JupyterWidgetBehavior\n         "},"demos":[],"symbol":"Urth.JupyterWidgetBehavior","is":"Urth.JupyterWidgetBehavior","properties":[{"name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"description":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","tags":[{"tag":"method","type":null,"name":"createModel","description":null},{"tag":"param","type":"String","name":"kernelClass","description":"A class name to instantiate kernel side."},{"tag":"param","type":"Number","name":"retryCount","description":"The number of times to retry the model creation if a failure occurs."}],"orig":"*\n             * Creates a backbone model and a comm connection with an instance\n             * of the specified kernelClass on the kernel.\n             *\n             * Upon completion, invokes `onModelReady` with the created model.\n             *\n             * @method createModel\n             * @param {String} kernelClass A class name to instantiate kernel side.\n             * @param {Number} retryCount The number of times to retry the model creation if a failure occurs.\n             "},"function":true},{"name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"description":"\nReturns the state of the connection to the kernel side proxy.\n\n","tags":[{"tag":"method","type":null,"name":"isConnected","description":null},{"tag":"return","type":"Boolean","description":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}],"orig":"*\n             * Returns the state of the connection to the kernel side proxy.\n             *\n             * @method isConnected\n             * @return {Boolean} Returns `true` if the element is able to communicate with the\n             *                  kernel side proxy.\n             "},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"onModelChange","type":"Function","desc":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","params":[{"name":"options","type":"Object","desc":null}],"jsdoc":{"description":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","tags":[{"tag":"method","type":null,"name":"onModelChange","description":null},{"tag":"param","type":"Object","name":"options","description":null}],"orig":"*\n             * Notification handler for changes to the model. This is a general handler that\n             * will be called when one or more model properties are changed. If interested in\n             * only a particular property, a client can define a function with the following name:\n             *\n             * `onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\n             * For example, a change to property `foo` will call a method with name `onModelFooChange`.\n             *\n             * @method onModelChange\n             * @param {Object} options\n             "},"function":true},{"name":"onModelReady","type":"Function","desc":"\nNotification handler invoked when the model is ready.\n\n","params":[],"jsdoc":{"description":"\nNotification handler invoked when the model is ready.\n\n","tags":[{"tag":"method","type":null,"name":"onModelReady","description":null}],"orig":"*\n             * Notification handler invoked when the model is ready.\n             *\n             * @method onModelReady\n             "},"function":true},{"name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"description":"\nSends a message to the kernel side proxy of this element.\n\n","tags":[{"tag":"method","type":null,"name":"send","description":null},{"tag":"param","type":"Object","name":"msg","description":"A json message."}],"orig":"*\n             * Sends a message to the kernel side proxy of this element.\n             *\n             * @method send\n             * @param {Object} msg A json message.\n             "},"function":true},{"name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"description":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","tags":[{"tag":"method","type":null,"name":"sync","description":null},{"tag":"param","type":"Object","name":"values","description":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"orig":"*\n             * Synchronizes the state provided with the kernel side proxy of this element.\n             *\n             * @method sync\n             * @param {Object} values An object containing the state to synchronize.\n             *                 The keys match properties on the kernel side proxy.\n             "},"function":true},{"name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"jsdoc":{"description":"\nUnregister event callbacks associated with the model.\n             ","tags":[],"orig":"*\n             * Unregister event callbacks associated with the model.\n             "},"private":true,"function":true},{"name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"jsdoc":{"description":"\nUnregister event callbacks associated with the notebook.\n             ","tags":[],"orig":"*\n             * Unregister event callbacks associated with the notebook.\n             "},"private":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"contentHref":"bower_components/urth-core-behaviors/jupyter-widget-behavior.html"},{"type":"behavior","desc":"\n`Urth.ChannelsBehavior` provides an interface to shared data\nchannels across the DOM tree. It uses\n[monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such\nthat any element including the behavior has access to the shared\ndata.\n\n","events":[],"jsdoc":{"description":"\n`Urth.ChannelsBehavior` provides an interface to shared data\nchannels across the DOM tree. It uses\n[monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such\nthat any element including the behavior has access to the shared\ndata.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.ChannelsBehavior","description":null}],"orig":"*\n         * `Urth.ChannelsBehavior` provides an interface to shared data\n         * channels across the DOM tree. It uses\n         * [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such\n         * that any element including the behavior has access to the shared\n         * data.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.ChannelsBehavior\n         "},"demos":[],"symbol":"Urth.ChannelsBehavior","is":"Urth.ChannelsBehavior","properties":[{"name":"clearData","type":"Function","desc":"\nClears all the data in the channel.\n\n","params":[{"name":"channel","type":"string","desc":"The name of the channel."}],"jsdoc":{"description":"\nClears all the data in the channel.\n\n","tags":[{"tag":"method","type":null,"name":"clearData","description":null},{"tag":"param","type":"string","name":"channel","description":"The name of the channel."}],"orig":"*\n             * Clears all the data in the channel.\n             *\n             * @method clearData\n             * @param {string} channel The name of the channel.\n             "},"function":true},{"name":"getItem","type":"Function","desc":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","params":[{"name":"key","type":"string","desc":"The key of the value to return."},{"name":"channel","type":"string","desc":"The name of the channel to get the value from."}],"jsdoc":{"description":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","tags":[{"tag":"method","type":null,"name":"getItem","description":null},{"tag":"param","type":"string","name":"key","description":"The key of the value to return."},{"tag":"return","type":"*","description":"The value stored for the key or undefined."},{"tag":"param","type":"string","name":"channel","description":"The name of the channel to get the value from."}],"orig":"*\n             * Retrieves the value of the specified key on the channel or\n             * undefined if the key has not been set.\n             *\n             * @method getItem\n             * @param {string} key The key of the value to return.\n             * @return {*} The value stored for the key or undefined.\n             * @param {string} channel The name of the channel to get the value from.\n             "},"function":true,"return":{"type":"*","desc":"The value stored for the key or undefined."}},{"name":"register","type":"Function","desc":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to register on."}],"jsdoc":{"description":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","tags":[{"tag":"method","type":null,"name":"register","description":null},{"tag":"param","type":"HTMLElement","name":"element","description":"The DOM element to register."},{"tag":"param","type":"string","name":"channel","description":"The name of the channel to register on."}],"orig":"*\n             * Registers an element as a listener for data channel changes.\n             * The element will have its property set when a key is set\n             * on the channel.\n             *\n             * Register with the '*' channel to have a `channelSetItem`\n             * event fired on the element when any property changes in any\n             * channel.\n             *\n             * @method register\n             * @param {HTMLElement} element The DOM element to register.\n             * @param {string} channel The name of the channel to register on.\n             "},"function":true},{"name":"setItem","type":"Function","desc":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","params":[{"name":"key","type":"string","desc":"The key to be associated with the value."},{"name":"value","type":"*","desc":"The value to set."},{"name":"channelName","type":"string","desc":"The name of the channel to set the value on."}],"jsdoc":{"description":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","tags":[{"tag":"method","type":null,"name":"setItem","description":null},{"tag":"param","type":"string","name":"key","description":"The key to be associated with the value."},{"tag":"param","type":"*","name":"value","description":"The value to set."},{"tag":"param","type":"string","name":"channelName","description":"The name of the channel to set the value on."}],"orig":"*\n             * Sets the value of a key on the channel. Setting a value\n             * will set the property value on all registered elements. Creates\n             * the channel if it does not exist.\n             *\n             * @method setItem\n             * @param {string} key The key to be associated with the value.\n             * @param {*} value The value to set.\n             * @param {string} channelName The name of the channel to set the value on.\n             "},"function":true},{"name":"switchChannel","type":"Function","desc":"\nSwitches the data channel that the given element listens to.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to register."},{"name":"newChannel","type":"string","desc":"The name of the new channel."},{"name":"oldChannel","type":"string","desc":"The name of the old channel."}],"jsdoc":{"description":"\nSwitches the data channel that the given element listens to.\n\n","tags":[{"tag":"method","type":null,"name":"switchChannel","description":null},{"tag":"param","type":"object","name":"element","description":"The DOM element to register."},{"tag":"param","type":"string","name":"newChannel","description":"The name of the new channel."},{"tag":"param","type":"string","name":"oldChannel","description":"The name of the old channel."}],"orig":"*\n             * Switches the data channel that the given element listens to.\n             *\n             * @method switchChannel\n             * @param {object} element The DOM element to register.\n             * @param {string} newChannel The name of the new channel.\n             * @param {string} oldChannel The name of the old channel.\n             "},"function":true},{"name":"unregister","type":"Function","desc":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to unregister from."}],"jsdoc":{"description":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","tags":[{"tag":"method","type":null,"name":"unregister","description":null},{"tag":"param","type":"HTMLElement","name":"element","description":"The DOM element to register."},{"tag":"param","type":"string","name":"channel","description":"The name of the channel to unregister from."}],"orig":"*\n             * Removes the specified element as a listener on the channel.\n             * If no element is specified then all registrations are removed.\n             *\n             * @method unregister\n             * @param {HTMLElement} element The DOM element to register.\n             * @param {string} channel The name of the channel to unregister from.\n             "},"function":true},{"name":"_clearElementData","type":"Function","desc":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","params":[{"name":"element"},{"name":"newChannelObj","type":"object","desc":"The new Channel."},{"name":"oldChannelObj","type":"object","desc":"The old Channel."}],"jsdoc":{"description":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","tags":[{"tag":"param","type":"object","name":"newChannelObj","description":"The new Channel."},{"tag":"param","type":"object","name":"oldChannelObj","description":"The old Channel."}],"orig":"*\n             * Clears element data properties from the old channel that are\n             * not in the new channel. This ensures that values from the old\n             * channel are not carried over to the new channel when switching.\n             *\n             * @param {object} newChannelObj The new Channel.\n             * @param {object} oldChannelObj The old Channel.\n             "},"private":true,"function":true},{"name":"_createChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"name":"_getChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"name":"_getOrCreateChannel","type":"Function","params":[{"name":"channelName"}],"private":true,"function":true},{"name":"_setElementData","type":"Function","desc":"\nSets channel data as properties on the given element.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to set."},{"name":"channelObj","type":"object","desc":"The Channel to get data from."}],"jsdoc":{"description":"\nSets channel data as properties on the given element.\n\n","tags":[{"tag":"param","type":"object","name":"element","description":"The DOM element to set."},{"tag":"param","type":"object","name":"channelObj","description":"The Channel to get data from."}],"orig":"*\n             * Sets channel data as properties on the given element.\n             *\n             * @param {object} element The DOM element to set.\n             * @param {object} channelObj The Channel to get data from.\n             "},"private":true,"function":true}],"contentHref":"bower_components/urth-core-channels/urth-core-channels-behavior.html"},{"type":"behavior","desc":"\nBehavior that allows a Polymer element to define new properties at runtime. To\nsupport this, several methods from Polymer.Bind were copied and redefined.\n\n","events":[],"jsdoc":{"description":"\nBehavior that allows a Polymer element to define new properties at runtime. To\nsupport this, several methods from Polymer.Bind were copied and redefined.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.DynamicPropertiesBehavior","description":null}],"orig":"*\n         * Behavior that allows a Polymer element to define new properties at runtime. To\n         * support this, several methods from Polymer.Bind were copied and redefined.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.DynamicPropertiesBehavior\n         "},"demos":[],"symbol":"Urth.DynamicPropertiesBehavior","is":"Urth.DynamicPropertiesBehavior","properties":[{"name":"addDynamicProperties","type":"Function","desc":"\nAdds the specified properties to this instance of an element. The\ndynProps parameter is in the same format as the `properties` object used\nin defining new Polymer elements.\n\n","params":[{"name":"dynProps","desc":"Object with properties to add"}],"jsdoc":{"description":"\nAdds the specified properties to this instance of an element. The\ndynProps parameter is in the same format as the `properties` object used\nin defining new Polymer elements.\n\n","tags":[{"tag":"param","type":null,"name":"dynProps","description":"Object with properties to add"},{"tag":"method","type":null,"name":"addDynamicProperties","description":null}],"orig":"*\n             * Adds the specified properties to this instance of an element. The\n             * dynProps parameter is in the same format as the `properties` object used\n             * in defining new Polymer elements.\n             *\n             * @param dynProps - Object with properties to add\n             * @method addDynamicProperties\n             "},"function":true},{"name":"resetDynamicProperties","type":"Function","desc":"\nRemoves all dynamic properties added to this element.\n\n","params":[],"jsdoc":{"description":"\nRemoves all dynamic properties added to this element.\n\n","tags":[{"tag":"method","type":null,"name":"resetDynamicProperties","description":null}],"orig":"*\n             * Removes all dynamic properties added to this element.\n             *\n             * @method resetDynamicProperties\n             "},"function":true},{"name":"__createAccessors","type":"Function","desc":"\nModified to add `configurable` to the descriptor object to allow for\ndeletion of dynamically added properties.\nsee http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             ","params":[{"name":"property"},{"name":"effects"}],"jsdoc":{"description":"\nModified to add `configurable` to the descriptor object to allow for\ndeletion of dynamically added properties.\nsee http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             ","tags":[],"orig":"\n             * Modified to add `configurable` to the descriptor object to allow for\n             * deletion of dynamically added properties.\n             * see http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             "},"private":true,"function":true},{"name":"__createBindings","type":"Function","desc":"\nModified from Polymer.Bind.createBindings to allow only createBindings the\ngiven properties and to call our __createAccessors function.\n             ","params":[{"name":"dynProps"}],"jsdoc":{"description":"\nModified from Polymer.Bind.createBindings to allow only createBindings the\ngiven properties and to call our __createAccessors function.\n             ","tags":[],"orig":"\n             * Modified from Polymer.Bind.createBindings to allow only createBindings the\n             * given properties and to call our __createAccessors function.\n             "},"private":true,"function":true}],"contentHref":"bower_components/urth-core-behaviors/dynamic-properties-behavior.html"},{"type":"behavior","desc":"\nBehavior that contains notebook related properties\n\n","events":[],"jsdoc":{"description":"\nBehavior that contains notebook related properties\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.JupyterNotebookEnv","description":null}],"orig":"*\n         * Behavior that contains notebook related properties\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.JupyterNotebookEnv\n         "},"demos":[],"symbol":"Urth.JupyterNotebookEnv","is":"Urth.JupyterNotebookEnv","properties":[{"name":"_baseURL","type":"Object","published":true,"default":"UNKNOWN","private":true},{"name":"_importBaseURL","type":"Object","published":true,"default":"url","private":true}],"contentHref":"bower_components/urth-core-behaviors/jupyter-notebook-env.html"}],"behaviorsByName":{"Urth.JupyterKernelObserver":{"type":"behavior","desc":"\nBehavior that provides pre-attached callbacks to kernel events.\n\n","events":[],"jsdoc":{"description":"\nBehavior that provides pre-attached callbacks to kernel events.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.JupyterKernelObserver","description":null}],"orig":"*\n         * Behavior that provides pre-attached callbacks to kernel events.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.JupyterKernelObserver\n         "},"demos":[],"symbol":"Urth.JupyterKernelObserver","is":"Urth.JupyterKernelObserver","properties":[{"name":"onKernelReady","type":"Function","desc":"\nHandler for kernel ready events. This event fires when a\nkernel is created and gets to ready state. It also triggers\n`onLoad` of the page if there is already a ready kernel.\n\n","params":[],"jsdoc":{"description":"\nHandler for kernel ready events. This event fires when a\nkernel is created and gets to ready state. It also triggers\n`onLoad` of the page if there is already a ready kernel.\n\n","tags":[{"tag":"method","type":null,"name":"onKerneReady","description":null}],"orig":"*\n             * Handler for kernel ready events. This event fires when a\n             * kernel is created and gets to ready state. It also triggers\n             * `onLoad` of the page if there is already a ready kernel.\n             *\n             * @method onKerneReady\n             "},"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"contentHref":"bower_components/urth-core-behaviors/jupyter-kernel-observer.html"},"Urth.JupyterWidgetBehavior":{"type":"behavior","desc":"\nBehavior that encapsulate some of the functions needed by\nIPyWidgets to properly communicate with their Kernel counterparts.\n\n","events":[],"jsdoc":{"description":"\nBehavior that encapsulate some of the functions needed by\nIPyWidgets to properly communicate with their Kernel counterparts.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.JupyterWidgetBehavior","description":null}],"orig":"*\n         * Behavior that encapsulate some of the functions needed by\n         * IPyWidgets to properly communicate with their Kernel counterparts.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.JupyterWidgetBehavior\n         "},"demos":[],"symbol":"Urth.JupyterWidgetBehavior","is":"Urth.JupyterWidgetBehavior","properties":[{"name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"description":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","tags":[{"tag":"method","type":null,"name":"createModel","description":null},{"tag":"param","type":"String","name":"kernelClass","description":"A class name to instantiate kernel side."},{"tag":"param","type":"Number","name":"retryCount","description":"The number of times to retry the model creation if a failure occurs."}],"orig":"*\n             * Creates a backbone model and a comm connection with an instance\n             * of the specified kernelClass on the kernel.\n             *\n             * Upon completion, invokes `onModelReady` with the created model.\n             *\n             * @method createModel\n             * @param {String} kernelClass A class name to instantiate kernel side.\n             * @param {Number} retryCount The number of times to retry the model creation if a failure occurs.\n             "},"function":true},{"name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"description":"\nReturns the state of the connection to the kernel side proxy.\n\n","tags":[{"tag":"method","type":null,"name":"isConnected","description":null},{"tag":"return","type":"Boolean","description":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}],"orig":"*\n             * Returns the state of the connection to the kernel side proxy.\n             *\n             * @method isConnected\n             * @return {Boolean} Returns `true` if the element is able to communicate with the\n             *                  kernel side proxy.\n             "},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"onModelChange","type":"Function","desc":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","params":[{"name":"options","type":"Object","desc":null}],"jsdoc":{"description":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","tags":[{"tag":"method","type":null,"name":"onModelChange","description":null},{"tag":"param","type":"Object","name":"options","description":null}],"orig":"*\n             * Notification handler for changes to the model. This is a general handler that\n             * will be called when one or more model properties are changed. If interested in\n             * only a particular property, a client can define a function with the following name:\n             *\n             * `onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\n             * For example, a change to property `foo` will call a method with name `onModelFooChange`.\n             *\n             * @method onModelChange\n             * @param {Object} options\n             "},"function":true},{"name":"onModelReady","type":"Function","desc":"\nNotification handler invoked when the model is ready.\n\n","params":[],"jsdoc":{"description":"\nNotification handler invoked when the model is ready.\n\n","tags":[{"tag":"method","type":null,"name":"onModelReady","description":null}],"orig":"*\n             * Notification handler invoked when the model is ready.\n             *\n             * @method onModelReady\n             "},"function":true},{"name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"description":"\nSends a message to the kernel side proxy of this element.\n\n","tags":[{"tag":"method","type":null,"name":"send","description":null},{"tag":"param","type":"Object","name":"msg","description":"A json message."}],"orig":"*\n             * Sends a message to the kernel side proxy of this element.\n             *\n             * @method send\n             * @param {Object} msg A json message.\n             "},"function":true},{"name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"description":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","tags":[{"tag":"method","type":null,"name":"sync","description":null},{"tag":"param","type":"Object","name":"values","description":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"orig":"*\n             * Synchronizes the state provided with the kernel side proxy of this element.\n             *\n             * @method sync\n             * @param {Object} values An object containing the state to synchronize.\n             *                 The keys match properties on the kernel side proxy.\n             "},"function":true},{"name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"jsdoc":{"description":"\nUnregister event callbacks associated with the model.\n             ","tags":[],"orig":"*\n             * Unregister event callbacks associated with the model.\n             "},"private":true,"function":true},{"name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"jsdoc":{"description":"\nUnregister event callbacks associated with the notebook.\n             ","tags":[],"orig":"*\n             * Unregister event callbacks associated with the notebook.\n             "},"private":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"contentHref":"bower_components/urth-core-behaviors/jupyter-widget-behavior.html"},"Urth.ChannelsBehavior":{"type":"behavior","desc":"\n`Urth.ChannelsBehavior` provides an interface to shared data\nchannels across the DOM tree. It uses\n[monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such\nthat any element including the behavior has access to the shared\ndata.\n\n","events":[],"jsdoc":{"description":"\n`Urth.ChannelsBehavior` provides an interface to shared data\nchannels across the DOM tree. It uses\n[monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such\nthat any element including the behavior has access to the shared\ndata.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.ChannelsBehavior","description":null}],"orig":"*\n         * `Urth.ChannelsBehavior` provides an interface to shared data\n         * channels across the DOM tree. It uses\n         * [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such\n         * that any element including the behavior has access to the shared\n         * data.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.ChannelsBehavior\n         "},"demos":[],"symbol":"Urth.ChannelsBehavior","is":"Urth.ChannelsBehavior","properties":[{"name":"clearData","type":"Function","desc":"\nClears all the data in the channel.\n\n","params":[{"name":"channel","type":"string","desc":"The name of the channel."}],"jsdoc":{"description":"\nClears all the data in the channel.\n\n","tags":[{"tag":"method","type":null,"name":"clearData","description":null},{"tag":"param","type":"string","name":"channel","description":"The name of the channel."}],"orig":"*\n             * Clears all the data in the channel.\n             *\n             * @method clearData\n             * @param {string} channel The name of the channel.\n             "},"function":true},{"name":"getItem","type":"Function","desc":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","params":[{"name":"key","type":"string","desc":"The key of the value to return."},{"name":"channel","type":"string","desc":"The name of the channel to get the value from."}],"jsdoc":{"description":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","tags":[{"tag":"method","type":null,"name":"getItem","description":null},{"tag":"param","type":"string","name":"key","description":"The key of the value to return."},{"tag":"return","type":"*","description":"The value stored for the key or undefined."},{"tag":"param","type":"string","name":"channel","description":"The name of the channel to get the value from."}],"orig":"*\n             * Retrieves the value of the specified key on the channel or\n             * undefined if the key has not been set.\n             *\n             * @method getItem\n             * @param {string} key The key of the value to return.\n             * @return {*} The value stored for the key or undefined.\n             * @param {string} channel The name of the channel to get the value from.\n             "},"function":true,"return":{"type":"*","desc":"The value stored for the key or undefined."}},{"name":"register","type":"Function","desc":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to register on."}],"jsdoc":{"description":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","tags":[{"tag":"method","type":null,"name":"register","description":null},{"tag":"param","type":"HTMLElement","name":"element","description":"The DOM element to register."},{"tag":"param","type":"string","name":"channel","description":"The name of the channel to register on."}],"orig":"*\n             * Registers an element as a listener for data channel changes.\n             * The element will have its property set when a key is set\n             * on the channel.\n             *\n             * Register with the '*' channel to have a `channelSetItem`\n             * event fired on the element when any property changes in any\n             * channel.\n             *\n             * @method register\n             * @param {HTMLElement} element The DOM element to register.\n             * @param {string} channel The name of the channel to register on.\n             "},"function":true},{"name":"setItem","type":"Function","desc":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","params":[{"name":"key","type":"string","desc":"The key to be associated with the value."},{"name":"value","type":"*","desc":"The value to set."},{"name":"channelName","type":"string","desc":"The name of the channel to set the value on."}],"jsdoc":{"description":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","tags":[{"tag":"method","type":null,"name":"setItem","description":null},{"tag":"param","type":"string","name":"key","description":"The key to be associated with the value."},{"tag":"param","type":"*","name":"value","description":"The value to set."},{"tag":"param","type":"string","name":"channelName","description":"The name of the channel to set the value on."}],"orig":"*\n             * Sets the value of a key on the channel. Setting a value\n             * will set the property value on all registered elements. Creates\n             * the channel if it does not exist.\n             *\n             * @method setItem\n             * @param {string} key The key to be associated with the value.\n             * @param {*} value The value to set.\n             * @param {string} channelName The name of the channel to set the value on.\n             "},"function":true},{"name":"switchChannel","type":"Function","desc":"\nSwitches the data channel that the given element listens to.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to register."},{"name":"newChannel","type":"string","desc":"The name of the new channel."},{"name":"oldChannel","type":"string","desc":"The name of the old channel."}],"jsdoc":{"description":"\nSwitches the data channel that the given element listens to.\n\n","tags":[{"tag":"method","type":null,"name":"switchChannel","description":null},{"tag":"param","type":"object","name":"element","description":"The DOM element to register."},{"tag":"param","type":"string","name":"newChannel","description":"The name of the new channel."},{"tag":"param","type":"string","name":"oldChannel","description":"The name of the old channel."}],"orig":"*\n             * Switches the data channel that the given element listens to.\n             *\n             * @method switchChannel\n             * @param {object} element The DOM element to register.\n             * @param {string} newChannel The name of the new channel.\n             * @param {string} oldChannel The name of the old channel.\n             "},"function":true},{"name":"unregister","type":"Function","desc":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to unregister from."}],"jsdoc":{"description":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","tags":[{"tag":"method","type":null,"name":"unregister","description":null},{"tag":"param","type":"HTMLElement","name":"element","description":"The DOM element to register."},{"tag":"param","type":"string","name":"channel","description":"The name of the channel to unregister from."}],"orig":"*\n             * Removes the specified element as a listener on the channel.\n             * If no element is specified then all registrations are removed.\n             *\n             * @method unregister\n             * @param {HTMLElement} element The DOM element to register.\n             * @param {string} channel The name of the channel to unregister from.\n             "},"function":true},{"name":"_clearElementData","type":"Function","desc":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","params":[{"name":"element"},{"name":"newChannelObj","type":"object","desc":"The new Channel."},{"name":"oldChannelObj","type":"object","desc":"The old Channel."}],"jsdoc":{"description":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","tags":[{"tag":"param","type":"object","name":"newChannelObj","description":"The new Channel."},{"tag":"param","type":"object","name":"oldChannelObj","description":"The old Channel."}],"orig":"*\n             * Clears element data properties from the old channel that are\n             * not in the new channel. This ensures that values from the old\n             * channel are not carried over to the new channel when switching.\n             *\n             * @param {object} newChannelObj The new Channel.\n             * @param {object} oldChannelObj The old Channel.\n             "},"private":true,"function":true},{"name":"_createChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"name":"_getChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"name":"_getOrCreateChannel","type":"Function","params":[{"name":"channelName"}],"private":true,"function":true},{"name":"_setElementData","type":"Function","desc":"\nSets channel data as properties on the given element.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to set."},{"name":"channelObj","type":"object","desc":"The Channel to get data from."}],"jsdoc":{"description":"\nSets channel data as properties on the given element.\n\n","tags":[{"tag":"param","type":"object","name":"element","description":"The DOM element to set."},{"tag":"param","type":"object","name":"channelObj","description":"The Channel to get data from."}],"orig":"*\n             * Sets channel data as properties on the given element.\n             *\n             * @param {object} element The DOM element to set.\n             * @param {object} channelObj The Channel to get data from.\n             "},"private":true,"function":true}],"contentHref":"bower_components/urth-core-channels/urth-core-channels-behavior.html"},"Urth.DynamicPropertiesBehavior":{"type":"behavior","desc":"\nBehavior that allows a Polymer element to define new properties at runtime. To\nsupport this, several methods from Polymer.Bind were copied and redefined.\n\n","events":[],"jsdoc":{"description":"\nBehavior that allows a Polymer element to define new properties at runtime. To\nsupport this, several methods from Polymer.Bind were copied and redefined.\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.DynamicPropertiesBehavior","description":null}],"orig":"*\n         * Behavior that allows a Polymer element to define new properties at runtime. To\n         * support this, several methods from Polymer.Bind were copied and redefined.\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.DynamicPropertiesBehavior\n         "},"demos":[],"symbol":"Urth.DynamicPropertiesBehavior","is":"Urth.DynamicPropertiesBehavior","properties":[{"name":"addDynamicProperties","type":"Function","desc":"\nAdds the specified properties to this instance of an element. The\ndynProps parameter is in the same format as the `properties` object used\nin defining new Polymer elements.\n\n","params":[{"name":"dynProps","desc":"Object with properties to add"}],"jsdoc":{"description":"\nAdds the specified properties to this instance of an element. The\ndynProps parameter is in the same format as the `properties` object used\nin defining new Polymer elements.\n\n","tags":[{"tag":"param","type":null,"name":"dynProps","description":"Object with properties to add"},{"tag":"method","type":null,"name":"addDynamicProperties","description":null}],"orig":"*\n             * Adds the specified properties to this instance of an element. The\n             * dynProps parameter is in the same format as the `properties` object used\n             * in defining new Polymer elements.\n             *\n             * @param dynProps - Object with properties to add\n             * @method addDynamicProperties\n             "},"function":true},{"name":"resetDynamicProperties","type":"Function","desc":"\nRemoves all dynamic properties added to this element.\n\n","params":[],"jsdoc":{"description":"\nRemoves all dynamic properties added to this element.\n\n","tags":[{"tag":"method","type":null,"name":"resetDynamicProperties","description":null}],"orig":"*\n             * Removes all dynamic properties added to this element.\n             *\n             * @method resetDynamicProperties\n             "},"function":true},{"name":"__createAccessors","type":"Function","desc":"\nModified to add `configurable` to the descriptor object to allow for\ndeletion of dynamically added properties.\nsee http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             ","params":[{"name":"property"},{"name":"effects"}],"jsdoc":{"description":"\nModified to add `configurable` to the descriptor object to allow for\ndeletion of dynamically added properties.\nsee http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             ","tags":[],"orig":"\n             * Modified to add `configurable` to the descriptor object to allow for\n             * deletion of dynamically added properties.\n             * see http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             "},"private":true,"function":true},{"name":"__createBindings","type":"Function","desc":"\nModified from Polymer.Bind.createBindings to allow only createBindings the\ngiven properties and to call our __createAccessors function.\n             ","params":[{"name":"dynProps"}],"jsdoc":{"description":"\nModified from Polymer.Bind.createBindings to allow only createBindings the\ngiven properties and to call our __createAccessors function.\n             ","tags":[],"orig":"\n             * Modified from Polymer.Bind.createBindings to allow only createBindings the\n             * given properties and to call our __createAccessors function.\n             "},"private":true,"function":true}],"contentHref":"bower_components/urth-core-behaviors/dynamic-properties-behavior.html"},"Urth.JupyterNotebookEnv":{"type":"behavior","desc":"\nBehavior that contains notebook related properties\n\n","events":[],"jsdoc":{"description":"\nBehavior that contains notebook related properties\n\n","tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"polymerBehavior","type":null,"name":"Urth.JupyterNotebookEnv","description":null}],"orig":"*\n         * Behavior that contains notebook related properties\n         *\n         * @group Urth Core\n         * @polymerBehavior Urth.JupyterNotebookEnv\n         "},"demos":[],"symbol":"Urth.JupyterNotebookEnv","is":"Urth.JupyterNotebookEnv","properties":[{"name":"_baseURL","type":"Object","published":true,"default":"UNKNOWN","private":true},{"name":"_importBaseURL","type":"Object","published":true,"default":"url","private":true}],"contentHref":"bower_components/urth-core-behaviors/jupyter-notebook-env.html"}},"elements":[{"type":"element","desc":"\nProvides a mechanism to enable [Polymer binding](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html)\nfeatures between elements across a common data channel. Property updates within\nan `urth-core-bind` template are synchronized with other `urth-core-bind` templates\nto update all related bindings.\n\nExample: _Specifying a value in the input box will update the value in the `span`_\n\n```html\n<template is='urth-core-bind'>\n    <div>Hello <span>{{user}}</span></div>\n</template>\n\n<template is='urth-core-bind'>\n    <input value={{user::input}}></input>\n</template>\n```\n\n","events":[{"desc":"\nFired when DOM is stamped by this template.\n\n","jsdoc":{"description":"\nFired when DOM is stamped by this template.\n\n","tags":[{"tag":"event","type":null,"description":"dom-change"}],"orig":"*\n         * Fired when DOM is stamped by this template.\n         *\n         * @event dom-change\n         "},"name":"dom-change","params":[]}],"properties":[{"name":"channel","type":"String","published":true,"default":"default","observer":"_onChannelChange"},{"__fromBehavior":"Urth.ChannelsBehavior","name":"clearData","type":"Function","desc":"\nClears all the data in the channel.\n\n","params":[{"name":"channel","type":"string","desc":"The name of the channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"clearData","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"getItem","type":"Function","desc":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","params":[{"name":"key","type":"string","desc":"The key of the value to return."},{"name":"channel","type":"string","desc":"The name of the channel to get the value from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"getItem","description":null}]},"function":true,"return":{"type":"*","desc":"The value stored for the key or undefined."}},{"__fromBehavior":"Urth.ChannelsBehavior","name":"register","type":"Function","desc":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to register on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"register","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"setItem","type":"Function","desc":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","params":[{"name":"key","type":"string","desc":"The key to be associated with the value."},{"name":"value","type":"*","desc":"The value to set."},{"name":"channelName","type":"string","desc":"The name of the channel to set the value on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"setItem","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"switchChannel","type":"Function","desc":"\nSwitches the data channel that the given element listens to.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to register."},{"name":"newChannel","type":"string","desc":"The name of the new channel."},{"name":"oldChannel","type":"string","desc":"The name of the old channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"switchChannel","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"unregister","type":"Function","desc":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to unregister from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"unregister","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_clearElementData","type":"Function","desc":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","params":[{"name":"element"},{"name":"newChannelObj","type":"object","desc":"The new Channel."},{"name":"oldChannelObj","type":"object","desc":"The old Channel."}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_createChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getOrCreateChannel","type":"Function","params":[{"name":"channelName"}],"private":true,"function":true},{"name":"_onChannelChange","type":"Function","params":[{"name":"newVal"},{"name":"oldVal"}],"private":true,"function":true},{"name":"_propertyChanged","type":"Function","params":[{"name":"property"},{"name":"newVal"},{"name":"oldVal"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_setElementData","type":"Function","desc":"\nSets channel data as properties on the given element.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to set."},{"name":"channelObj","type":"object","desc":"The Channel to get data from."}],"private":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"extends","type":"string","private":true,"configuration":true}],"behaviors":["Urth.DomBindBehavior","Urth.ChannelsBehavior"],"observers":[],"is":"urth-core-bind","contentHref":"bower_components/urth-core-bind/urth-core-bind.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-bind"}]},"demos":[]},{"type":"element","desc":"\nAn element that provides [monostate](http://c2.com/cgi/wiki?MonostatePattern)\ndata channels. All instances of `urth-core-channels` have access to the shared\ndata. Use the `register` API to register elements as listeners of the data channel.\nWhen a property value change occurs, all listeners of the data channel are notified\nby having the associated property set on the element.\n\nExamples:\n\n```html\n<urth-core-channels id='dataChannel'></urth-core-channels>\n```\n\nProperty values can be set and retrieved using the `setItem` and `getItem`\nAPI:\n\n```javascript\ndocument.getElementById('dataChannel').setItem('user', 'Luke');\n```\n\nIf the instance is included in a Polymer element, values can be set\nand retrieved as follows:\n\n```html\n<urth-core-channels id='dataChannel'></urth-core-channels>\n...\nthis.$.dataChannel.setItem('user', 'Luke');\nthis.$.dataChannel.getItem('user') // Returns 'Luke'\n```\n\nRegister an element with the data channel to receive property updates:\n\n```html\n<urth-core-channels id='dataChannel'></urth-core-channels>\n<template is='urth-core-bind' id='mytemplate'>\n    <div><span>{{user}}</span>, may the force be with you</div>\n</template>\n...\nvar dataChannel = document.getElementById('dataChannel');\nvar mytemplate = document.getElementById('mytemplate');\ndataChannel.register(mytemplate);\ndataChannel.setItem('user', 'Luke');\n```\n\n","events":[],"properties":[{"__fromBehavior":"Urth.ChannelsBehavior","name":"clearData","type":"Function","desc":"\nClears all the data in the channel.\n\n","params":[{"name":"channel","type":"string","desc":"The name of the channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"clearData","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"createModel","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"getItem","type":"Function","desc":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","params":[{"name":"key","type":"string","desc":"The key of the value to return."},{"name":"channel","type":"string","desc":"The name of the channel to get the value from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"getItem","description":null}]},"function":true,"return":{"type":"*","desc":"The value stored for the key or undefined."}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isConnected","description":null}]},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"onChannelSetItem","type":"Function","desc":"\nCalled when an item property has been changed in any channel.\nPushes changes into the backbone model and sends a message\ncontaining the change to the kernel proxy.\n         ","params":[{"name":"event"}],"function":true},{"name":"onKernelReady","type":"Function","desc":"\nWhen a kernel is available and ready, this handler sends the request\nto create a new kernel side channels proxy and establishes the comm.\n         ","params":[],"function":true},{"name":"onModelChange","type":"Function","desc":"\nCalls to this method occur when users make changes to channel data using\nthe kernel language.\n         ","params":[{"name":"options"}],"function":true},{"name":"onModelReady","type":"Function","params":[],"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"register","type":"Function","desc":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to register on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"register","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"send","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"setItem","type":"Function","desc":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","params":[{"name":"key","type":"string","desc":"The key to be associated with the value."},{"name":"value","type":"*","desc":"The value to set."},{"name":"channelName","type":"string","desc":"The name of the channel to set the value on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"setItem","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"switchChannel","type":"Function","desc":"\nSwitches the data channel that the given element listens to.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to register."},{"name":"newChannel","type":"string","desc":"The name of the new channel."},{"name":"oldChannel","type":"string","desc":"The name of the old channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"switchChannel","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"sync","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"unregister","type":"Function","desc":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to unregister from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"unregister","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_clearElementData","type":"Function","desc":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","params":[{"name":"element"},{"name":"newChannelObj","type":"object","desc":"The new Channel."},{"name":"oldChannelObj","type":"object","desc":"The old Channel."}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_createChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getOrCreateChannel","type":"Function","params":[{"name":"channelName"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_handleItemChangeMessage","type":"Function","desc":"\nHandle an item change represented by the given path and value.\nThe path is of the form <CHANNEL_NAME>:<ITEM_NAME>, e.g. \"c:user\".\n         ","params":[{"name":"path"},{"name":"value"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_setElementData","type":"Function","desc":"\nSets channel data as properties on the given element.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to set."},{"name":"channelObj","type":"object","desc":"The Channel to get data from."}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterKernelObserver","name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"listeners","type":"Object","private":true,"configuration":true}],"behaviors":["Urth.ChannelsBehavior","Urth.JupyterWidgetBehavior","Urth.JupyterKernelObserver"],"observers":[],"is":"urth-core-channels","contentHref":"bower_components/urth-core-channels/urth-core-channels.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Framework"},{"tag":"element","type":null,"description":"urth-core-channels"}]},"demos":[]},{"type":"element","desc":"\nRepresents a widget that binds to a DataFrame variable. The DataFrame's\nrepresentation is surfaced in the 'value' property.\n\nExample:\n\n    <urth-core-dataframe id=\"f1\" ref=\"aDataFrame\" value=\"{{x}}\" auto></urth-core-dataframe>\n\n","events":[],"properties":[{"name":"auto","type":"Boolean","desc":"\nToggles automatic updates upon the completion of code execution.\n\n","published":true,"default":false,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"auto"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"createModel","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isConnected","description":null}]},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"limit","type":"Number","desc":"\nSets the maximun number of rows to bring to the client\n\n","published":true,"default":100,"reflectToAttribute":"UNKNOWN","observer":"_onLimitChange","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"limit"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"onModelChange","type":"Function","desc":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","params":[{"name":"options","type":"Object","desc":null}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"onModelChange","description":null}]},"function":true},{"name":"onModelReady","type":"Function","desc":"\nonModelReady is invoked when have created the model portion of the widget\n         ","params":[],"function":true},{"name":"onModelValueChange","type":"Function","desc":"\nonModelValueChange is invoked by JupyterWidgetBehavior when the `value` `property in\nthe Backbone model changes.\n         ","params":[{"name":"newVal"}],"function":true},{"name":"ref","type":"String","desc":"\n`ref` is name of the DataFrame variable that this element\nwill bind to.\n\n","published":true,"default":"","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"ref"}]}},{"name":"refresh","type":"Function","desc":"\nUpdate the DataFrame `value` held by this element with\nthe DataFrame's current state on the kernel.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"refresh","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"send","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"sync","description":null}]},"function":true},{"name":"value","type":"Object","desc":"\n`value` is the serialized representation of the DataFrame `ref`.\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"value"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_onExecutionComplete","type":"Function","params":[],"private":true,"function":true},{"name":"_onLimitChange","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Urth.JupyterWidgetBehavior","Urth.ExecutionCompleteBehavior"],"observers":[],"is":"urth-core-dataframe","contentHref":"bower_components/urth-core-dataframe/urth-core-dataframe.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-dataframe"}]},"demos":[]},{"type":"element","desc":"\nCreates a client side proxy to a function defined in the kernel. This function is specified by\nname using the `ref` attribute.\n\nThe elements allows setting parameters in 2 ways:\n\n1. Using properties named in the patters `arg-<parameter name>`\n    <urth-core-function ref=\"aFunction\" arg-x='5' arg-y='4'></urth-core-function>\n\n2. Using the `args` property. The `args` property is a JSON Object where the keys are the parameter names\n    <urth-core-function ref=\"aFunction\" args='{\"x\":5, \"y\":4}'></urth-core-function>\n\nBoth examples are equivalent to invoking `aFunction(x=5, y=4)`\n\n`urth-core-function` also provides an `invoke` method. This method can be used to force an invocation of the function.\n\n","events":[],"properties":[{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"addDynamicProperties","type":"Function","desc":"\nAdds the specified properties to this instance of an element. The\ndynProps parameter is in the same format as the `properties` object used\nin defining new Polymer elements.\n\n","params":[{"name":"dynProps","desc":"Object with properties to add"}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"addDynamicProperties","description":null}]},"function":true},{"name":"args","type":"Object","desc":"\nObject reflecting the current values of the parameters to the function. This property can be used\nfor binding.\n\n","published":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"args"}]}},{"name":"auto","type":"Boolean","desc":"\nControls if the function is invoked automatically on any change to\nits parameters, and whether the `signature` is refreshed\nafter each code execution.\n\n","published":true,"default":false,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"auto"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"createModel","description":null}]},"function":true},{"name":"delay","type":"Number","desc":"\nSets a delay time, in milliseconds, for debouncing the invocation of the function.\nThis time will debounce for every argument change as well as every call to invoke.\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"delay"}]}},{"name":"invoke","type":"Function","desc":"\nForces an invocation of the function\n\n","params":[{"name":"skipValidate","type":"boolean","desc":"Optional flag to skip validation of params before sending message to invoke"}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"invoke","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isConnected","description":null}]},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"isReady","type":"Boolean","desc":"\nFlag to signal that the function is ready to be called. Ready means that the\nsignature of the function is known and any required arguments have values assigned.\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"isReady"}]}},{"name":"isValid","type":"Function","desc":"\nFunction is valid if all necessary parameter for the function are set. Necessary parameters refers to\nparameters that are listed and do not have a default value.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isValid","description":null}]},"function":true,"return":{"type":"boolean","desc":"true if all necessary parameters are set, else false"}},{"name":"limit","type":"Number","desc":"\nSets the maximun number of rows to bring to the client\n\n","published":true,"default":100,"reflectToAttribute":"UNKNOWN","observer":"_onLimitChange","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"limit"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"onModelChange","type":"Function","desc":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","params":[{"name":"options","type":"Object","desc":null}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"onModelChange","description":null}]},"function":true},{"name":"onModelReady","type":"Function","desc":"\nonModelReady is invoked when have created the model portion of the widget\n             ","params":[],"function":true},{"name":"onModelResultChange","type":"Function","desc":"\nonModelResultChange is invoked by JupyterWidgetBehavior when the `result` property in\nthe Backbone model changes.\n             ","params":[{"name":"newVal"}],"function":true},{"name":"onModelSignatureChange","type":"Function","params":[{"name":"newVal"}],"function":true},{"name":"ref","type":"String","desc":"\nName of the function to proxy. Must be a function that is defined in the kernel.\n\n","published":true,"default":"","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"ref"}]}},{"name":"refresh","type":"Function","desc":"\nUpdate the `signature` held by this element with\nthe function signature's current state on the kernel.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"refresh","description":null}]},"function":true},{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"resetDynamicProperties","type":"Function","desc":"\nRemoves all dynamic properties added to this element.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"resetDynamicProperties","description":null}]},"function":true},{"name":"result","type":"Object","desc":"\nObject representing the function return value after invocation.\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"result"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"send","description":null}]},"function":true},{"name":"signature","type":"Object","desc":"\nDescribes the signature of the parameters to the function. This object will\ncontain objects keyed by the parameter name and information about type and\nrequirement. It is used to determine if the current arguments are in a valid\nstate to invoke the function.\n\n","published":true,"readOnly":true,"observer":"_onSignatureChange","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"signature"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"sync","description":null}]},"function":true},{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"__createAccessors","type":"Function","desc":"\nModified to add `configurable` to the descriptor object to allow for\ndeletion of dynamically added properties.\nsee http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             ","params":[{"name":"property"},{"name":"effects"}],"private":true,"function":true},{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"__createBindings","type":"Function","desc":"\nModified from Polymer.Bind.createBindings to allow only createBindings the\ngiven properties and to call our __createAccessors function.\n             ","params":[{"name":"dynProps"}],"private":true,"function":true},{"name":"_computeReady","type":"Function","desc":"\nCurrently using isValid as a way to compute isReady. isValid includes the check for available signature.\n             ","params":[{"name":"args"},{"name":"signature"}],"private":true,"function":true},{"name":"_createArgChangeHandler","type":"Function","params":[{"name":"param"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_isParameterAttribute","type":"Function","params":[{"name":"attr"}],"private":true,"function":true},{"name":"_isParameterUnset","type":"Function","desc":"\nReturns false if paramValue is undefined, null and NaN.\n\n","params":[{"name":"paramValue","type":"*","desc":"Any value sent to test"}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"_isParameterUnset","description":null}]},"private":true,"function":true,"return":{"type":"boolean","desc":"true if considered unset"}},{"name":"_onArgsPropertyChanged","type":"Function","params":[{"name":"rec"}],"private":true,"function":true},{"name":"_onExecutionComplete","type":"Function","params":[],"private":true,"function":true},{"name":"_onLimitChange","type":"Function","params":[{"name":"limit"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"name":"_onParameterChange","type":"Function","params":[{"name":"argName"},{"name":"argValue"}],"private":true,"function":true},{"name":"_onSignatureChange","type":"Function","desc":"\nThis method handles changes to the signature of the method. It will create a new property based on\nthe name of the parameter. These new properties will allow data binding and will be kept in sync with\nthe contents of the `args` property.\n\n             ","params":[{"name":"sig"}],"private":true,"function":true},{"name":"_paramsFromAttributes","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"name":"_syncParamAttributes","type":"Function","params":[{"name":"params"}],"private":true,"function":true},{"name":"_toParamName","type":"Function","params":[{"name":"attr"}],"private":true,"function":true},{"name":"_toParamPropertyName","type":"Function","params":[{"name":"paramName"}],"private":true,"function":true},{"name":"_toParamPropertyObserverName","type":"Function","params":[{"name":"paramName"}],"private":true,"function":true},{"name":"_tryInvoke","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Urth.JupyterWidgetBehavior","Urth.ExecutionCompleteBehavior","Urth.DynamicPropertiesBehavior"],"observers":[{"javascriptNode":{"type":"Literal","value":"_onArgsPropertyChanged(args.*)","raw":"'_onArgsPropertyChanged(args.*)'","range":[4181,4213],"loc":{"start":{"line":128,"column":16},"end":{"line":128,"column":48}}},"expression":"_onArgsPropertyChanged(args.*)"}],"is":"urth-core-function","contentHref":"bower_components/urth-core-function/urth-core-function.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-function"}]},"demos":[]},{"type":"element","desc":"\nAdds functionality to `<link>` to provide a mechanism to\ninstall web components registered as [bower](http://bower.io/) packages. This\nelement works with a server side REST endpoint to install the specified package\nand then upon successfull install, injects the appropriate HTML import into the page.\n\nThe `href` attribute should be specified as a relative path as the appropriate\nbase URL for the environment will be prefixed automatically. In the notebook\nall `href` values should be of the form `urth_components/<package_name>/<file>`.\n\nExample: _Install and import the paper-slider element_\n\n```html\n<link rel='import' href='urth_components/paper-slider/paper-slider.html'\n       is='urth-core-import' package='PolymerElements/paper-slider'>\n```\n\n","events":[{"desc":"\nfired if the specified package or href fails to load.\n","jsdoc":{"description":"\nfired if the specified package or href fails to load.\n","tags":[{"tag":"event","type":null,"description":"`importerror`"}],"orig":"*\n         * fired if the specified package or href fails to load.\n         * @event `importerror`\n         "},"name":"`importerror`","params":[]}],"properties":[{"name":"debug","type":"Boolean","desc":"\nIf `true`, console output will be written to indicate the progress of\nimporting the specified `package`.\n\n","published":true,"default":"false","jsdoc":{"tags":[{"tag":"default","type":null,"description":"false"}]}},{"name":"package","type":"String","desc":"\nThe project dependency to load. Any endpoints that are\nvalid for the [`bower install`](http://bower.io/docs/api/#install)\ncommand may be specified.\n             ","published":true,"observer":"_packageChanged","reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Urth.JupyterNotebookEnv","name":"_baseURL","type":"Object","published":true,"default":"UNKNOWN","private":true},{"name":"_downloadPackage","type":"Function","params":[],"private":true,"function":true},{"name":"_getImportEndpointURL","type":"Function","params":[{"name":"baseURL"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterNotebookEnv","name":"_importBaseURL","type":"Object","published":true,"default":"url","private":true},{"name":"_importEndpointURL","type":"Object","desc":"\nThis is the URL to the import endpoint on the notebook\n             ","published":true,"private":true},{"name":"_onHrefAttrChange","type":"Function","params":[{"name":"newHref"}],"private":true,"function":true},{"name":"_onLinkLoad","type":"Function","params":[],"private":true,"function":true},{"name":"_packageChanged","type":"Function","params":[{"name":"newVal"},{"name":"oldVal"}],"private":true,"function":true},{"name":"_prefixHref","type":"Function","desc":" the notebook initialization and cell imports.","params":[{"name":"newHref"}],"private":true,"function":true},{"name":"attributeChanged","type":"Function","params":[{"name":"name"},{"name":"type"}],"private":true,"configuration":true,"function":true},{"name":"extends","type":"string","private":true,"configuration":true},{"name":"listeners","type":"Object","private":true,"configuration":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Urth.JupyterNotebookEnv"],"observers":[],"is":"urth-core-import","contentHref":"bower_components/urth-core-import/urth-core-import.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-import"}]},"demos":[]},{"type":"element","desc":"\nRepresents a widget that draws a chart.\nThe chart accepts data via attribute `datarows` and column headers via attribute `columns`:\n\n1. `datarows` should be of type Array of Arrays, representing list of rows.\n\n2. 'columns' should also be of type Array of strings, representing column headers.\n\n","events":[],"properties":[{"name":"columns","type":"Array","desc":"\n`columns` is an array representing column names\n\n","published":true,"default":"[]","notify":true,"observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"columns"},{"tag":"default","type":null,"description":"[]"}]}},{"name":"data","type":"Array","desc":"\n`datarows` is an array representing data\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"datarows"}]}},{"name":"datarows","type":"Array","desc":"\n`datarows` is an array representing data\n\n","published":true,"default":"[[]]","notify":true,"observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"datarows"},{"tag":"default","type":null,"description":"[[]]"}]}},{"name":"palette","type":"Array","desc":"\n`palette` specifies an optional list of colors to override the default palette\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"palette"},{"tag":"readonly","type":null,"description":null}]}},{"name":"primary","type":"Number","desc":"\nReferences the nth column in datarows, typically used to identify independent or input (e.g. x axis)\n\n","published":true,"default":"0","observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"primary"},{"tag":"default","type":null,"description":"0"}]}},{"name":"rotatelabels","type":"number","desc":"\n`rotatelabels` is an optional angle in degrees to rotate labels on the X axis\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"rotatelabels"},{"tag":"readonly","type":null,"description":null}]}},{"name":"secondary","type":"Number","desc":"\nReferences the nth column in datarows, typically used to identify dependent or output (e.g. y axis)\n\n","published":true,"default":"1","observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"secondary"},{"tag":"default","type":null,"description":"1"}]}},{"name":"selection","type":"Array","desc":"\nThe data based on the currently selected row\n\n","published":true,"default":"[]","readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"selection"},{"tag":"default","type":null,"description":"[]"}]}},{"name":"staggerlabels","type":"boolean","desc":"\n`staggerlabels` will stagger the layout of labels on the X axis\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"staggerlabels"},{"tag":"readonly","type":null,"description":null}]}},{"name":"type","type":"String","desc":"\n`type` is type of chart (e.g. bar, pie)\n\n","published":true,"notify":true,"observer":"_typeChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"type"},{"tag":"default","type":null,"description":"''"}]},"default":"''"},{"name":"_createChart","type":"Function","params":[{"name":"callback"}],"private":true,"function":true},{"name":"_fireWhenReady","type":"Function","params":[],"private":true,"function":true},{"name":"_parseColumns","type":"Function","params":[],"private":true,"function":true},{"name":"_resizer","type":"Function","params":[],"private":true,"function":true},{"name":"_svgSelection","type":"Function","params":[{"name":"d3"}],"private":true,"function":true},{"name":"_transformData","type":"Function","params":[{"name":"datarows"},{"name":"columns"},{"name":"primary"},{"name":"secondary"}],"private":true,"function":true},{"name":"_typeChanged","type":"Function","params":[{"name":"newValue"},{"name":"oldValue"}],"private":true,"function":true},{"name":"_update","type":"Function","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"listeners","type":"Object","private":true,"configuration":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Polymer.IronResizableBehavior"],"observers":[],"is":"urth-viz-chart","contentHref":"bower_components/urth-viz-chart/urth-viz-chart.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-chart"}]},"demos":[]},{"type":"element","desc":"\n`urth-viz-col` creates a Polymer element that adds a hook to existing Handsontable to update column settings afterLoadData\n\n","events":[],"properties":[{"name":"format","type":"String","desc":"\nthe format this column is using. ex: \"$0,0.00\".\n","published":true,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":": format"}]}},{"name":"index","type":"Number","desc":"the index this column is, relative to parent table, starting at 0.\n","published":true,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":": index"}]}},{"name":"type","type":"String","desc":"\nthe type of format this column is using. ex: \"numeric\".\n","published":true,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":": type"}]}}],"behaviors":[],"observers":[],"is":"urth-viz-col","contentHref":"bower_components/urth-viz-col/urth-viz-col.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-col"}]},"demos":[]},{"type":"element","desc":"\nCreates a Polymer element that displays a table with specified data and column headers.\n\nThe table accepts data via attribute `datarows` and column headers via attribute `columns`:\n\n1. `datarows` should be of type Array of Arrays, representing list of rows.\n\n2. 'columns' should also be of type Array of strings, representing column headers. If undefined, table will not have column headers.\n\n","events":[],"properties":[{"name":"COL_OPTIONS","type":"Array"},{"name":"columns","type":"Array","desc":"\nColumn headers for table. Must be an Array of String\n\n","published":true,"observer":"_columnsChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"columns"}]}},{"name":"datarows","type":"Array","desc":"\nData rows for table. Must be an Array of Arrays\n\n","published":true,"observer":"_datarowsChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"datarows"}]}},{"name":"ROW_HEIGHT","type":"number"},{"name":"rowsVisible","type":"Number","desc":"\nNumber of rows user wants visible at a time,\n(the rest is hidden in scrollable area)\nIf table is shorter in height this number, the shorter height is rendered\n\n","published":true,"default":15,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"rows-visible"}]}},{"name":"selection","type":"Array","desc":"\nThe data based on the currently selected row\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"selection"}]}},{"name":"_calcTableHeight","type":"Function","params":[],"private":true,"function":true},{"name":"_columnsChanged","type":"Function","params":[{"name":"newColumns"}],"private":true,"function":true},{"name":"_createTable","type":"Function","params":[{"name":"datarows"}],"private":true,"function":true},{"name":"_datarowsChanged","type":"Function","params":[{"name":"newDataRows"}],"private":true,"function":true},{"name":"_forceRowSelection","type":"Function","desc":"\nBy setting the col to -1, this forces handson to think that the user clicked on a row header and it goes\nthrough the path of selecting the entire row.\n             ","params":[{"name":"event"},{"name":"coords"}],"private":true,"function":true},{"name":"_handleSelection","type":"Function","desc":"\nHandle when selection has finished taking place on handson\n             ","params":[{"name":"rowStart"},{"name":"colStart"},{"name":"rowEnd"},{"name":"colEnd"}],"private":true,"function":true},{"name":"_isHeightSet","type":"Function","params":[],"private":true,"function":true},{"name":"_parseColumn","type":"Function","desc":" ignore if there is no data","params":[{"name":"column"},{"name":"colSettings"}],"private":true,"function":true},{"name":"_parseColumns","type":"Function","params":[],"private":true,"function":true},{"name":"_willDataFit","type":"Function","params":[{"name":"datarows"}],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"urth-viz-table","contentHref":"bower_components/urth-viz-table/urth-viz-table.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-table"}]},"demos":[]},{"type":"element","desc":"\nRepresents a widget that lets the user choose between a set of visualizations for a given dataframe.\n\nExample:\n\n    <urth-viz-explorer ref=\"aDataFrame\"></urth-viz-explorer>\n\n","events":[],"properties":[{"name":"type","type":"String","desc":"\n`type` is a reference to a dataframe\n\n","published":true,"default":"bar","notify":true,"observer":"_typeChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"type"}]}},{"name":"_typeChanged","type":"Function","params":[{"name":"newValue"},{"name":"oldValue"}],"private":true,"function":true}],"behaviors":[],"observers":[],"is":"urth-viz-explorer","contentHref":"bower_components/urth-viz-explorer/urth-viz-explorer.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-explorer"}]},"demos":[]}],"elementsByTagName":{"urth-core-bind":{"type":"element","desc":"\nProvides a mechanism to enable [Polymer binding](https://www.polymer-project.org/1.0/docs/devguide/data-binding.html)\nfeatures between elements across a common data channel. Property updates within\nan `urth-core-bind` template are synchronized with other `urth-core-bind` templates\nto update all related bindings.\n\nExample: _Specifying a value in the input box will update the value in the `span`_\n\n```html\n<template is='urth-core-bind'>\n    <div>Hello <span>{{user}}</span></div>\n</template>\n\n<template is='urth-core-bind'>\n    <input value={{user::input}}></input>\n</template>\n```\n\n","events":[{"desc":"\nFired when DOM is stamped by this template.\n\n","jsdoc":{"description":"\nFired when DOM is stamped by this template.\n\n","tags":[{"tag":"event","type":null,"description":"dom-change"}],"orig":"*\n         * Fired when DOM is stamped by this template.\n         *\n         * @event dom-change\n         "},"name":"dom-change","params":[]}],"properties":[{"name":"channel","type":"String","published":true,"default":"default","observer":"_onChannelChange"},{"__fromBehavior":"Urth.ChannelsBehavior","name":"clearData","type":"Function","desc":"\nClears all the data in the channel.\n\n","params":[{"name":"channel","type":"string","desc":"The name of the channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"clearData","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"getItem","type":"Function","desc":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","params":[{"name":"key","type":"string","desc":"The key of the value to return."},{"name":"channel","type":"string","desc":"The name of the channel to get the value from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"getItem","description":null}]},"function":true,"return":{"type":"*","desc":"The value stored for the key or undefined."}},{"__fromBehavior":"Urth.ChannelsBehavior","name":"register","type":"Function","desc":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to register on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"register","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"setItem","type":"Function","desc":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","params":[{"name":"key","type":"string","desc":"The key to be associated with the value."},{"name":"value","type":"*","desc":"The value to set."},{"name":"channelName","type":"string","desc":"The name of the channel to set the value on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"setItem","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"switchChannel","type":"Function","desc":"\nSwitches the data channel that the given element listens to.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to register."},{"name":"newChannel","type":"string","desc":"The name of the new channel."},{"name":"oldChannel","type":"string","desc":"The name of the old channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"switchChannel","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"unregister","type":"Function","desc":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to unregister from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"unregister","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_clearElementData","type":"Function","desc":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","params":[{"name":"element"},{"name":"newChannelObj","type":"object","desc":"The new Channel."},{"name":"oldChannelObj","type":"object","desc":"The old Channel."}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_createChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getOrCreateChannel","type":"Function","params":[{"name":"channelName"}],"private":true,"function":true},{"name":"_onChannelChange","type":"Function","params":[{"name":"newVal"},{"name":"oldVal"}],"private":true,"function":true},{"name":"_propertyChanged","type":"Function","params":[{"name":"property"},{"name":"newVal"},{"name":"oldVal"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_setElementData","type":"Function","desc":"\nSets channel data as properties on the given element.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to set."},{"name":"channelObj","type":"object","desc":"The Channel to get data from."}],"private":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"extends","type":"string","private":true,"configuration":true}],"behaviors":["Urth.DomBindBehavior","Urth.ChannelsBehavior"],"observers":[],"is":"urth-core-bind","contentHref":"bower_components/urth-core-bind/urth-core-bind.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-bind"}]},"demos":[]},"urth-core-channels":{"type":"element","desc":"\nAn element that provides [monostate](http://c2.com/cgi/wiki?MonostatePattern)\ndata channels. All instances of `urth-core-channels` have access to the shared\ndata. Use the `register` API to register elements as listeners of the data channel.\nWhen a property value change occurs, all listeners of the data channel are notified\nby having the associated property set on the element.\n\nExamples:\n\n```html\n<urth-core-channels id='dataChannel'></urth-core-channels>\n```\n\nProperty values can be set and retrieved using the `setItem` and `getItem`\nAPI:\n\n```javascript\ndocument.getElementById('dataChannel').setItem('user', 'Luke');\n```\n\nIf the instance is included in a Polymer element, values can be set\nand retrieved as follows:\n\n```html\n<urth-core-channels id='dataChannel'></urth-core-channels>\n...\nthis.$.dataChannel.setItem('user', 'Luke');\nthis.$.dataChannel.getItem('user') // Returns 'Luke'\n```\n\nRegister an element with the data channel to receive property updates:\n\n```html\n<urth-core-channels id='dataChannel'></urth-core-channels>\n<template is='urth-core-bind' id='mytemplate'>\n    <div><span>{{user}}</span>, may the force be with you</div>\n</template>\n...\nvar dataChannel = document.getElementById('dataChannel');\nvar mytemplate = document.getElementById('mytemplate');\ndataChannel.register(mytemplate);\ndataChannel.setItem('user', 'Luke');\n```\n\n","events":[],"properties":[{"__fromBehavior":"Urth.ChannelsBehavior","name":"clearData","type":"Function","desc":"\nClears all the data in the channel.\n\n","params":[{"name":"channel","type":"string","desc":"The name of the channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"clearData","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"createModel","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"getItem","type":"Function","desc":"\nRetrieves the value of the specified key on the channel or\nundefined if the key has not been set.\n\n","params":[{"name":"key","type":"string","desc":"The key of the value to return."},{"name":"channel","type":"string","desc":"The name of the channel to get the value from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"getItem","description":null}]},"function":true,"return":{"type":"*","desc":"The value stored for the key or undefined."}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isConnected","description":null}]},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"onChannelSetItem","type":"Function","desc":"\nCalled when an item property has been changed in any channel.\nPushes changes into the backbone model and sends a message\ncontaining the change to the kernel proxy.\n         ","params":[{"name":"event"}],"function":true},{"name":"onKernelReady","type":"Function","desc":"\nWhen a kernel is available and ready, this handler sends the request\nto create a new kernel side channels proxy and establishes the comm.\n         ","params":[],"function":true},{"name":"onModelChange","type":"Function","desc":"\nCalls to this method occur when users make changes to channel data using\nthe kernel language.\n         ","params":[{"name":"options"}],"function":true},{"name":"onModelReady","type":"Function","params":[],"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"register","type":"Function","desc":"\nRegisters an element as a listener for data channel changes.\nThe element will have its property set when a key is set\non the channel.\n\nRegister with the '*' channel to have a `channelSetItem`\nevent fired on the element when any property changes in any\nchannel.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to register on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"register","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"send","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"setItem","type":"Function","desc":"\nSets the value of a key on the channel. Setting a value\nwill set the property value on all registered elements. Creates\nthe channel if it does not exist.\n\n","params":[{"name":"key","type":"string","desc":"The key to be associated with the value."},{"name":"value","type":"*","desc":"The value to set."},{"name":"channelName","type":"string","desc":"The name of the channel to set the value on."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"setItem","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"switchChannel","type":"Function","desc":"\nSwitches the data channel that the given element listens to.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to register."},{"name":"newChannel","type":"string","desc":"The name of the new channel."},{"name":"oldChannel","type":"string","desc":"The name of the old channel."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"switchChannel","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"sync","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"unregister","type":"Function","desc":"\nRemoves the specified element as a listener on the channel.\nIf no element is specified then all registrations are removed.\n\n","params":[{"name":"element","type":"HTMLElement","desc":"The DOM element to register."},{"name":"channel","type":"string","desc":"The name of the channel to unregister from."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"unregister","description":null}]},"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_clearElementData","type":"Function","desc":"\nClears element data properties from the old channel that are\nnot in the new channel. This ensures that values from the old\nchannel are not carried over to the new channel when switching.\n\n","params":[{"name":"element"},{"name":"newChannelObj","type":"object","desc":"The new Channel."},{"name":"oldChannelObj","type":"object","desc":"The old Channel."}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_createChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getChannel","type":"Function","params":[{"name":"channel"}],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_getOrCreateChannel","type":"Function","params":[{"name":"channelName"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_handleItemChangeMessage","type":"Function","desc":"\nHandle an item change represented by the given path and value.\nThe path is of the form <CHANNEL_NAME>:<ITEM_NAME>, e.g. \"c:user\".\n         ","params":[{"name":"path"},{"name":"value"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.ChannelsBehavior","name":"_setElementData","type":"Function","desc":"\nSets channel data as properties on the given element.\n\n","params":[{"name":"element","type":"object","desc":"The DOM element to set."},{"name":"channelObj","type":"object","desc":"The Channel to get data from."}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterKernelObserver","name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"listeners","type":"Object","private":true,"configuration":true}],"behaviors":["Urth.ChannelsBehavior","Urth.JupyterWidgetBehavior","Urth.JupyterKernelObserver"],"observers":[],"is":"urth-core-channels","contentHref":"bower_components/urth-core-channels/urth-core-channels.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Framework"},{"tag":"element","type":null,"description":"urth-core-channels"}]},"demos":[]},"urth-core-dataframe":{"type":"element","desc":"\nRepresents a widget that binds to a DataFrame variable. The DataFrame's\nrepresentation is surfaced in the 'value' property.\n\nExample:\n\n    <urth-core-dataframe id=\"f1\" ref=\"aDataFrame\" value=\"{{x}}\" auto></urth-core-dataframe>\n\n","events":[],"properties":[{"name":"auto","type":"Boolean","desc":"\nToggles automatic updates upon the completion of code execution.\n\n","published":true,"default":false,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"auto"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"createModel","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isConnected","description":null}]},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"limit","type":"Number","desc":"\nSets the maximun number of rows to bring to the client\n\n","published":true,"default":100,"reflectToAttribute":"UNKNOWN","observer":"_onLimitChange","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"limit"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"onModelChange","type":"Function","desc":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","params":[{"name":"options","type":"Object","desc":null}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"onModelChange","description":null}]},"function":true},{"name":"onModelReady","type":"Function","desc":"\nonModelReady is invoked when have created the model portion of the widget\n         ","params":[],"function":true},{"name":"onModelValueChange","type":"Function","desc":"\nonModelValueChange is invoked by JupyterWidgetBehavior when the `value` `property in\nthe Backbone model changes.\n         ","params":[{"name":"newVal"}],"function":true},{"name":"ref","type":"String","desc":"\n`ref` is name of the DataFrame variable that this element\nwill bind to.\n\n","published":true,"default":"","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"ref"}]}},{"name":"refresh","type":"Function","desc":"\nUpdate the DataFrame `value` held by this element with\nthe DataFrame's current state on the kernel.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"refresh","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"send","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"sync","description":null}]},"function":true},{"name":"value","type":"Object","desc":"\n`value` is the serialized representation of the DataFrame `ref`.\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"value"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_onExecutionComplete","type":"Function","params":[],"private":true,"function":true},{"name":"_onLimitChange","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Urth.JupyterWidgetBehavior","Urth.ExecutionCompleteBehavior"],"observers":[],"is":"urth-core-dataframe","contentHref":"bower_components/urth-core-dataframe/urth-core-dataframe.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-dataframe"}]},"demos":[]},"urth-core-function":{"type":"element","desc":"\nCreates a client side proxy to a function defined in the kernel. This function is specified by\nname using the `ref` attribute.\n\nThe elements allows setting parameters in 2 ways:\n\n1. Using properties named in the patters `arg-<parameter name>`\n    <urth-core-function ref=\"aFunction\" arg-x='5' arg-y='4'></urth-core-function>\n\n2. Using the `args` property. The `args` property is a JSON Object where the keys are the parameter names\n    <urth-core-function ref=\"aFunction\" args='{\"x\":5, \"y\":4}'></urth-core-function>\n\nBoth examples are equivalent to invoking `aFunction(x=5, y=4)`\n\n`urth-core-function` also provides an `invoke` method. This method can be used to force an invocation of the function.\n\n","events":[],"properties":[{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"addDynamicProperties","type":"Function","desc":"\nAdds the specified properties to this instance of an element. The\ndynProps parameter is in the same format as the `properties` object used\nin defining new Polymer elements.\n\n","params":[{"name":"dynProps","desc":"Object with properties to add"}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"addDynamicProperties","description":null}]},"function":true},{"name":"args","type":"Object","desc":"\nObject reflecting the current values of the parameters to the function. This property can be used\nfor binding.\n\n","published":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"args"}]}},{"name":"auto","type":"Boolean","desc":"\nControls if the function is invoked automatically on any change to\nits parameters, and whether the `signature` is refreshed\nafter each code execution.\n\n","published":true,"default":false,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"auto"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"createModel","type":"Function","desc":"\nCreates a backbone model and a comm connection with an instance\nof the specified kernelClass on the kernel.\n\nUpon completion, invokes `onModelReady` with the created model.\n\n","params":[{"name":"kernelClass","type":"String","desc":"A class name to instantiate kernel side."},{"name":"retryCount","type":"Number","desc":"The number of times to retry the model creation if a failure occurs."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"createModel","description":null}]},"function":true},{"name":"delay","type":"Number","desc":"\nSets a delay time, in milliseconds, for debouncing the invocation of the function.\nThis time will debounce for every argument change as well as every call to invoke.\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"delay"}]}},{"name":"invoke","type":"Function","desc":"\nForces an invocation of the function\n\n","params":[{"name":"skipValidate","type":"boolean","desc":"Optional flag to skip validation of params before sending message to invoke"}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"invoke","description":null}]},"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"isConnected","type":"Function","desc":"\nReturns the state of the connection to the kernel side proxy.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isConnected","description":null}]},"function":true,"return":{"type":"Boolean","desc":"Returns `true` if the element is able to communicate with the\n                 kernel side proxy."}},{"name":"isReady","type":"Boolean","desc":"\nFlag to signal that the function is ready to be called. Ready means that the\nsignature of the function is known and any required arguments have values assigned.\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"isReady"}]}},{"name":"isValid","type":"Function","desc":"\nFunction is valid if all necessary parameter for the function are set. Necessary parameters refers to\nparameters that are listed and do not have a default value.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"isValid","description":null}]},"function":true,"return":{"type":"boolean","desc":"true if all necessary parameters are set, else false"}},{"name":"limit","type":"Number","desc":"\nSets the maximun number of rows to bring to the client\n\n","published":true,"default":100,"reflectToAttribute":"UNKNOWN","observer":"_onLimitChange","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"limit"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"onModelChange","type":"Function","desc":"\nNotification handler for changes to the model. This is a general handler that\nwill be called when one or more model properties are changed. If interested in\nonly a particular property, a client can define a function with the following name:\n\n`onModel<property_name>Change`, where `<property_name>` is camel case capitalized.\nFor example, a change to property `foo` will call a method with name `onModelFooChange`.\n\n","params":[{"name":"options","type":"Object","desc":null}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"onModelChange","description":null}]},"function":true},{"name":"onModelReady","type":"Function","desc":"\nonModelReady is invoked when have created the model portion of the widget\n             ","params":[],"function":true},{"name":"onModelResultChange","type":"Function","desc":"\nonModelResultChange is invoked by JupyterWidgetBehavior when the `result` property in\nthe Backbone model changes.\n             ","params":[{"name":"newVal"}],"function":true},{"name":"onModelSignatureChange","type":"Function","params":[{"name":"newVal"}],"function":true},{"name":"ref","type":"String","desc":"\nName of the function to proxy. Must be a function that is defined in the kernel.\n\n","published":true,"default":"","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"ref"}]}},{"name":"refresh","type":"Function","desc":"\nUpdate the `signature` held by this element with\nthe function signature's current state on the kernel.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"refresh","description":null}]},"function":true},{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"resetDynamicProperties","type":"Function","desc":"\nRemoves all dynamic properties added to this element.\n\n","params":[],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"resetDynamicProperties","description":null}]},"function":true},{"name":"result","type":"Object","desc":"\nObject representing the function return value after invocation.\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"result"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"send","type":"Function","desc":"\nSends a message to the kernel side proxy of this element.\n\n","params":[{"name":"msg","type":"Object","desc":"A json message."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"send","description":null}]},"function":true},{"name":"signature","type":"Object","desc":"\nDescribes the signature of the parameters to the function. This object will\ncontain objects keyed by the parameter name and information about type and\nrequirement. It is used to determine if the current arguments are in a valid\nstate to invoke the function.\n\n","published":true,"readOnly":true,"observer":"_onSignatureChange","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"signature"}]}},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"sync","type":"Function","desc":"\nSynchronizes the state provided with the kernel side proxy of this element.\n\n","params":[{"name":"values","type":"Object","desc":"An object containing the state to synchronize.\n                The keys match properties on the kernel side proxy."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"sync","description":null}]},"function":true},{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"__createAccessors","type":"Function","desc":"\nModified to add `configurable` to the descriptor object to allow for\ndeletion of dynamically added properties.\nsee http://stackoverflow.com/questions/7141210/how-do-i-undo-a-object-defineproperty-call\n             ","params":[{"name":"property"},{"name":"effects"}],"private":true,"function":true},{"__fromBehavior":"Urth.DynamicPropertiesBehavior","name":"__createBindings","type":"Function","desc":"\nModified from Polymer.Bind.createBindings to allow only createBindings the\ngiven properties and to call our __createAccessors function.\n             ","params":[{"name":"dynProps"}],"private":true,"function":true},{"name":"_computeReady","type":"Function","desc":"\nCurrently using isValid as a way to compute isReady. isValid includes the check for available signature.\n             ","params":[{"name":"args"},{"name":"signature"}],"private":true,"function":true},{"name":"_createArgChangeHandler","type":"Function","params":[{"name":"param"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_doCreateModel","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_handleCommDisconnect","type":"Function","params":[],"private":true,"function":true},{"name":"_isParameterAttribute","type":"Function","params":[{"name":"attr"}],"private":true,"function":true},{"name":"_isParameterUnset","type":"Function","desc":"\nReturns false if paramValue is undefined, null and NaN.\n\n","params":[{"name":"paramValue","type":"*","desc":"Any value sent to test"}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"_isParameterUnset","description":null}]},"private":true,"function":true,"return":{"type":"boolean","desc":"true if considered unset"}},{"name":"_onArgsPropertyChanged","type":"Function","params":[{"name":"rec"}],"private":true,"function":true},{"name":"_onExecutionComplete","type":"Function","params":[],"private":true,"function":true},{"name":"_onLimitChange","type":"Function","params":[{"name":"limit"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_onModelChange","type":"Function","params":[{"name":"options"}],"private":true,"function":true},{"name":"_onParameterChange","type":"Function","params":[{"name":"argName"},{"name":"argValue"}],"private":true,"function":true},{"name":"_onSignatureChange","type":"Function","desc":"\nThis method handles changes to the signature of the method. It will create a new property based on\nthe name of the parameter. These new properties will allow data binding and will be kept in sync with\nthe contents of the `args` property.\n\n             ","params":[{"name":"sig"}],"private":true,"function":true},{"name":"_paramsFromAttributes","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_retryCreateModel","type":"Function","params":[],"private":true,"function":true},{"name":"_syncParamAttributes","type":"Function","params":[{"name":"params"}],"private":true,"function":true},{"name":"_toParamName","type":"Function","params":[{"name":"attr"}],"private":true,"function":true},{"name":"_toParamPropertyName","type":"Function","params":[{"name":"paramName"}],"private":true,"function":true},{"name":"_toParamPropertyObserverName","type":"Function","params":[{"name":"paramName"}],"private":true,"function":true},{"name":"_tryInvoke","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterModelCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the model.\n             ","params":[],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"_unRegisterNotebookCallbacks","type":"Function","desc":"\nUnregister event callbacks associated with the notebook.\n             ","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Urth.JupyterWidgetBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Urth.JupyterWidgetBehavior","Urth.ExecutionCompleteBehavior","Urth.DynamicPropertiesBehavior"],"observers":[{"javascriptNode":{"type":"Literal","value":"_onArgsPropertyChanged(args.*)","raw":"'_onArgsPropertyChanged(args.*)'","range":[4181,4213],"loc":{"start":{"line":128,"column":16},"end":{"line":128,"column":48}}},"expression":"_onArgsPropertyChanged(args.*)"}],"is":"urth-core-function","contentHref":"bower_components/urth-core-function/urth-core-function.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-function"}]},"demos":[]},"urth-core-import":{"type":"element","desc":"\nAdds functionality to `<link>` to provide a mechanism to\ninstall web components registered as [bower](http://bower.io/) packages. This\nelement works with a server side REST endpoint to install the specified package\nand then upon successfull install, injects the appropriate HTML import into the page.\n\nThe `href` attribute should be specified as a relative path as the appropriate\nbase URL for the environment will be prefixed automatically. In the notebook\nall `href` values should be of the form `urth_components/<package_name>/<file>`.\n\nExample: _Install and import the paper-slider element_\n\n```html\n<link rel='import' href='urth_components/paper-slider/paper-slider.html'\n       is='urth-core-import' package='PolymerElements/paper-slider'>\n```\n\n","events":[{"desc":"\nfired if the specified package or href fails to load.\n","jsdoc":{"description":"\nfired if the specified package or href fails to load.\n","tags":[{"tag":"event","type":null,"description":"`importerror`"}],"orig":"*\n         * fired if the specified package or href fails to load.\n         * @event `importerror`\n         "},"name":"`importerror`","params":[]}],"properties":[{"name":"debug","type":"Boolean","desc":"\nIf `true`, console output will be written to indicate the progress of\nimporting the specified `package`.\n\n","published":true,"default":"false","jsdoc":{"tags":[{"tag":"default","type":null,"description":"false"}]}},{"name":"package","type":"String","desc":"\nThe project dependency to load. Any endpoints that are\nvalid for the [`bower install`](http://bower.io/docs/api/#install)\ncommand may be specified.\n             ","published":true,"observer":"_packageChanged","reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Urth.JupyterNotebookEnv","name":"_baseURL","type":"Object","published":true,"default":"UNKNOWN","private":true},{"name":"_downloadPackage","type":"Function","params":[],"private":true,"function":true},{"name":"_getImportEndpointURL","type":"Function","params":[{"name":"baseURL"}],"private":true,"function":true},{"__fromBehavior":"Urth.JupyterNotebookEnv","name":"_importBaseURL","type":"Object","published":true,"default":"url","private":true},{"name":"_importEndpointURL","type":"Object","desc":"\nThis is the URL to the import endpoint on the notebook\n             ","published":true,"private":true},{"name":"_onHrefAttrChange","type":"Function","params":[{"name":"newHref"}],"private":true,"function":true},{"name":"_onLinkLoad","type":"Function","params":[],"private":true,"function":true},{"name":"_packageChanged","type":"Function","params":[{"name":"newVal"},{"name":"oldVal"}],"private":true,"function":true},{"name":"_prefixHref","type":"Function","desc":" the notebook initialization and cell imports.","params":[{"name":"newHref"}],"private":true,"function":true},{"name":"attributeChanged","type":"Function","params":[{"name":"name"},{"name":"type"}],"private":true,"configuration":true,"function":true},{"name":"extends","type":"string","private":true,"configuration":true},{"name":"listeners","type":"Object","private":true,"configuration":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Urth.JupyterNotebookEnv"],"observers":[],"is":"urth-core-import","contentHref":"bower_components/urth-core-import/urth-core-import.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Core"},{"tag":"element","type":null,"description":"urth-core-import"}]},"demos":[]},"urth-viz-chart":{"type":"element","desc":"\nRepresents a widget that draws a chart.\nThe chart accepts data via attribute `datarows` and column headers via attribute `columns`:\n\n1. `datarows` should be of type Array of Arrays, representing list of rows.\n\n2. 'columns' should also be of type Array of strings, representing column headers.\n\n","events":[],"properties":[{"name":"columns","type":"Array","desc":"\n`columns` is an array representing column names\n\n","published":true,"default":"[]","notify":true,"observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"columns"},{"tag":"default","type":null,"description":"[]"}]}},{"name":"data","type":"Array","desc":"\n`datarows` is an array representing data\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"datarows"}]}},{"name":"datarows","type":"Array","desc":"\n`datarows` is an array representing data\n\n","published":true,"default":"[[]]","notify":true,"observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"datarows"},{"tag":"default","type":null,"description":"[[]]"}]}},{"name":"palette","type":"Array","desc":"\n`palette` specifies an optional list of colors to override the default palette\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"palette"},{"tag":"readonly","type":null,"description":null}]}},{"name":"primary","type":"Number","desc":"\nReferences the nth column in datarows, typically used to identify independent or input (e.g. x axis)\n\n","published":true,"default":"0","observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"primary"},{"tag":"default","type":null,"description":"0"}]}},{"name":"rotatelabels","type":"number","desc":"\n`rotatelabels` is an optional angle in degrees to rotate labels on the X axis\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"rotatelabels"},{"tag":"readonly","type":null,"description":null}]}},{"name":"secondary","type":"Number","desc":"\nReferences the nth column in datarows, typically used to identify dependent or output (e.g. y axis)\n\n","published":true,"default":"1","observer":"_update","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"secondary"},{"tag":"default","type":null,"description":"1"}]}},{"name":"selection","type":"Array","desc":"\nThe data based on the currently selected row\n\n","published":true,"default":"[]","readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"selection"},{"tag":"default","type":null,"description":"[]"}]}},{"name":"staggerlabels","type":"boolean","desc":"\n`staggerlabels` will stagger the layout of labels on the X axis\n\n","published":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"staggerlabels"},{"tag":"readonly","type":null,"description":null}]}},{"name":"type","type":"String","desc":"\n`type` is type of chart (e.g. bar, pie)\n\n","published":true,"notify":true,"observer":"_typeChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"type"},{"tag":"default","type":null,"description":"''"}]},"default":"''"},{"name":"_createChart","type":"Function","params":[{"name":"callback"}],"private":true,"function":true},{"name":"_fireWhenReady","type":"Function","params":[],"private":true,"function":true},{"name":"_parseColumns","type":"Function","params":[],"private":true,"function":true},{"name":"_resizer","type":"Function","params":[],"private":true,"function":true},{"name":"_svgSelection","type":"Function","params":[{"name":"d3"}],"private":true,"function":true},{"name":"_transformData","type":"Function","params":[{"name":"datarows"},{"name":"columns"},{"name":"primary"},{"name":"secondary"}],"private":true,"function":true},{"name":"_typeChanged","type":"Function","params":[{"name":"newValue"},{"name":"oldValue"}],"private":true,"function":true},{"name":"_update","type":"Function","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"listeners","type":"Object","private":true,"configuration":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Polymer.IronResizableBehavior"],"observers":[],"is":"urth-viz-chart","contentHref":"bower_components/urth-viz-chart/urth-viz-chart.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-chart"}]},"demos":[]},"urth-viz-col":{"type":"element","desc":"\n`urth-viz-col` creates a Polymer element that adds a hook to existing Handsontable to update column settings afterLoadData\n\n","events":[],"properties":[{"name":"format","type":"String","desc":"\nthe format this column is using. ex: \"$0,0.00\".\n","published":true,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":": format"}]}},{"name":"index","type":"Number","desc":"the index this column is, relative to parent table, starting at 0.\n","published":true,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":": index"}]}},{"name":"type","type":"String","desc":"\nthe type of format this column is using. ex: \"numeric\".\n","published":true,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":": type"}]}}],"behaviors":[],"observers":[],"is":"urth-viz-col","contentHref":"bower_components/urth-viz-col/urth-viz-col.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-col"}]},"demos":[]},"urth-viz-table":{"type":"element","desc":"\nCreates a Polymer element that displays a table with specified data and column headers.\n\nThe table accepts data via attribute `datarows` and column headers via attribute `columns`:\n\n1. `datarows` should be of type Array of Arrays, representing list of rows.\n\n2. 'columns' should also be of type Array of strings, representing column headers. If undefined, table will not have column headers.\n\n","events":[],"properties":[{"name":"COL_OPTIONS","type":"Array"},{"name":"columns","type":"Array","desc":"\nColumn headers for table. Must be an Array of String\n\n","published":true,"observer":"_columnsChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"columns"}]}},{"name":"datarows","type":"Array","desc":"\nData rows for table. Must be an Array of Arrays\n\n","published":true,"observer":"_datarowsChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"datarows"}]}},{"name":"ROW_HEIGHT","type":"number"},{"name":"rowsVisible","type":"Number","desc":"\nNumber of rows user wants visible at a time,\n(the rest is hidden in scrollable area)\nIf table is shorter in height this number, the shorter height is rendered\n\n","published":true,"default":15,"reflectToAttribute":"UNKNOWN","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"rows-visible"}]}},{"name":"selection","type":"Array","desc":"\nThe data based on the currently selected row\n\n","published":true,"readOnly":true,"notify":true,"jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"selection"}]}},{"name":"_calcTableHeight","type":"Function","params":[],"private":true,"function":true},{"name":"_columnsChanged","type":"Function","params":[{"name":"newColumns"}],"private":true,"function":true},{"name":"_createTable","type":"Function","params":[{"name":"datarows"}],"private":true,"function":true},{"name":"_datarowsChanged","type":"Function","params":[{"name":"newDataRows"}],"private":true,"function":true},{"name":"_forceRowSelection","type":"Function","desc":"\nBy setting the col to -1, this forces handson to think that the user clicked on a row header and it goes\nthrough the path of selecting the entire row.\n             ","params":[{"name":"event"},{"name":"coords"}],"private":true,"function":true},{"name":"_handleSelection","type":"Function","desc":"\nHandle when selection has finished taking place on handson\n             ","params":[{"name":"rowStart"},{"name":"colStart"},{"name":"rowEnd"},{"name":"colEnd"}],"private":true,"function":true},{"name":"_isHeightSet","type":"Function","params":[],"private":true,"function":true},{"name":"_parseColumn","type":"Function","desc":" ignore if there is no data","params":[{"name":"column"},{"name":"colSettings"}],"private":true,"function":true},{"name":"_parseColumns","type":"Function","params":[],"private":true,"function":true},{"name":"_willDataFit","type":"Function","params":[{"name":"datarows"}],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"urth-viz-table","contentHref":"bower_components/urth-viz-table/urth-viz-table.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-table"}]},"demos":[]},"urth-viz-explorer":{"type":"element","desc":"\nRepresents a widget that lets the user choose between a set of visualizations for a given dataframe.\n\nExample:\n\n    <urth-viz-explorer ref=\"aDataFrame\"></urth-viz-explorer>\n\n","events":[],"properties":[{"name":"type","type":"String","desc":"\n`type` is a reference to a dataframe\n\n","published":true,"default":"bar","notify":true,"observer":"_typeChanged","jsdoc":{"tags":[{"tag":"attribute","type":null,"description":"type"}]}},{"name":"_typeChanged","type":"Function","params":[{"name":"newValue"},{"name":"oldValue"}],"private":true,"function":true}],"behaviors":[],"observers":[],"is":"urth-viz-explorer","contentHref":"bower_components/urth-viz-explorer/urth-viz-explorer.html","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Urth Viz"},{"tag":"element","type":null,"description":"urth-viz-explorer"}]},"demos":[]}},"features":[]}